Index: moderation.py
===================================================================
--- moderation.py	(revision 72)
+++ moderation.py	(working copy)
@@ -190,6 +190,7 @@
     
     """
     akismet = False
+    akismet_auto_delete = False
     auto_close_field = None
     auto_moderate_field = None
     close_after = None
@@ -243,6 +244,30 @@
                     return True
         return False
 
+    def delete(self, comment, content_object):
+        """
+        Determines whether a given comment should be deleted (or
+        "marked as removed" in the FreeComment system) or posted/sent
+        to moderation as normal. Intended for use with akismet_auto_delete,
+        to send Akismet-marked spam directly to the trash instead of
+        forcing moderators to manually view every comment, spam or not.
+
+        Returns ``True`` if the comment should be deleted, ``False if
+        the comment should be kept (marked as approved).
+        """
+        if self.akismet and self.akismet_auto_delete:
+            from akismet import Akismet
+            akismet_api = Akismet(key=settings.AKISMET_API_KEY,
+                                  blog_url='http://%s' % Site.objects.get_current().domain)
+            if akismet_api.verify_key():
+                akismet_data = { 'comment_type': 'comment',
+                                 'referrer': '',
+                                 'user_ip': comment.ip_address,
+                                 'user_agent': '' }
+                if akismet_api.comment_check(comment.comment, data=akismet_data, build_data=True):
+                    return True
+        return False
+
     def email(self, comment, content_object):
         """
         Emails notification of a new comment to site staff when email
@@ -409,6 +434,14 @@
             return
         if moderation_class.moderate(instance, content_object):
             instance.is_public = False
+        if instance.__class__ is FreeComment and not moderation_class.delete(instance, content_object):
+            instance.approved = True
+        else:
+            instance.approved = False
+        if instance.__class__ is Comment and moderation_class.delete(instance, content_object):
+            instance.is_removed = True
+        else:
+            instance.is_removed = False
         moderation_class.email(instance, content_object)
     
     def post_save_moderation(self, sender, instance):
